use std::{sync::Arc, time::Duration};

use anyhow::{anyhow, Result};
use bigdecimal::BigDecimal;
use starknet::providers::{jsonrpc::HttpTransport, JsonRpcClient};
use tokio::sync::mpsc::Receiver;
use tokio::time::interval;

use crate::{
    oracle::PragmaOracle,
    types::account::StarknetAccount,
    types::position::{Position, PositionsMap},
};

// TODO: Should be a CLI arg
const CHECK_POSITIONS_INTERVAL: u64 = 5;

pub struct MonitoringService {
    pub rpc_client: Arc<JsonRpcClient<HttpTransport>>,
    pub account: StarknetAccount,
    pub pragma_oracle: Arc<PragmaOracle>,
    pub positions_receiver: Receiver<Position>,
    pub positions: PositionsMap,
}

impl MonitoringService {
    pub fn new(
        rpc_client: Arc<JsonRpcClient<HttpTransport>>,
        account: StarknetAccount,
        pragma_api_key: String,
        positions_receiver: Receiver<Position>,
    ) -> MonitoringService {
        MonitoringService {
            rpc_client,
            account,
            pragma_oracle: Arc::new(PragmaOracle::new(pragma_api_key)),
            positions_receiver,
            positions: PositionsMap::new(),
        }
    }

    pub async fn start(mut self) -> Result<()> {
        let mut update_interval = interval(Duration::from_secs(CHECK_POSITIONS_INTERVAL));

        loop {
            tokio::select! {
                // Monitor the positions every N seconds
                _ = update_interval.tick() => {
                    self.monitor_positions_liquidability().await?;
                }

                // Insert the new positions indexed by the IndexerService
                maybe_position = self.positions_receiver.recv() => {
                    match maybe_position {
                        Some(position) => {
                            if !position.is_closed() {
                                self.positions.insert(position).await;
                            }
                        }
                        None => {
                            return Err(anyhow!("â›” Monitoring stopped unexpectedly."));
                        }
                    }
                }
            }
        }
    }

    /// Update all monitored positions and check if it's worth to liquidate any.
    /// TODO: Check issue for multicall update:
    /// https://github.com/astraly-labs/vesu-liquidator/issues/12
    /// TODO: Check all positions in parallel
    async fn monitor_positions_liquidability(&self) -> Result<()> {
        let monitored_positions = self.positions.0.read().await;
        if monitored_positions.is_empty() {
            return Ok(());
        }
        println!("\nðŸ”Ž Checking if any position is liquidable...");
        for (_, position) in monitored_positions.iter() {
            if position.is_liquidable(&self.pragma_oracle).await {
                let _estimated_profit = self.compute_profitability(position).await?;
                // TODO: if profit > threshold, go liquidate by executing txs
            }
        }
        println!("ðŸ¤¨ They're good.. for now...");
        Ok(())
    }

    /// Simulates the profit generated by liquidating a given position
    async fn compute_profitability(&self, position: &Position) -> Result<BigDecimal> {
        let liquidable_amount = position.liquidable_amount(&self.pragma_oracle).await?;

        let liquidation_txs = position.get_liquidation_txs(
            self.account.account_address().await,
            liquidable_amount.clone(),
        );
        let execution_fees = self.account.estimate_fees_cost(&liquidation_txs).await?;

        Ok(liquidable_amount - execution_fees)
    }
}
